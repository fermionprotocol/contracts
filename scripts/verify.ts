import hre from "hardhat";
import { readContracts } from "./libraries/utils";

export async function verifySuite(env: string = "", contracts: string[] = []) {
  await hre.run("clean");

  // Right after compilation, Hardhat sometimes wrongly reports missing artifacts.
  // Ignore this error, but throw any other error.
  try {
    await hre.run("compile");
  } catch (e) {
    if (e?.message.includes("HH700: Artifact for contract") && e?.message.includes("not found")) {
      return;
    }
    throw e;
  }

  const allContracts = contracts.length === 0;

  const { contracts: deploymentData } = await readContracts(env);

  for (const contract of deploymentData) {
    if (allContracts || contracts.includes(contract.name)) {
      console.log(`Verifying contract: ${contract.name}`);

      if (contract.name == "InitializationFacet") {
        // InitializationFacet uses `address(this)` in one of the immutable variables.
        // Consequently, the deployed bytecode is different from the one generated by Hardhat and pre-verification check fails.
        // To fix this, we need to update the deployed bytecode in the build info with the actual deployed bytecode.
        const { sourceName, contractName } = await hre.artifacts.readArtifact("InitializationFacet");
        const InitializationFacetDeployedBytecode = await hre.ethers.provider.getCode(contract.address);

        const InitializationFacetBuildInfo = await hre.artifacts.getBuildInfo(`${sourceName}:${contractName}`);
        if (InitializationFacetBuildInfo) {
          const contractOutput = InitializationFacetBuildInfo.output.contracts[sourceName][contractName];
          contractOutput.evm.deployedBytecode.object = InitializationFacetDeployedBytecode.slice(2);

          await hre.artifacts.saveBuildInfo(
            InitializationFacetBuildInfo.solcVersion,
            InitializationFacetBuildInfo.solcLongVersion,
            InitializationFacetBuildInfo.input,
            InitializationFacetBuildInfo?.output,
          );
        }
      }

      try {
        await hre.run("verify:verify", {
          address: contract.address,
          constructorArguments: contract.args,
        });
      } catch (e) {
        console.log(`‚ùå Failed to verify ${contract.name} on block explorer. ${e.message}`);
      }
    }
  }
}
